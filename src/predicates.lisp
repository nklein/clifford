(in-package #:clifford)

(defun %zerop (info)
  `(defmethod zerop ((x ,(name info)))
     (and ,@(iter (for a in (accessors info))
                  (collecting `(zerop (,a x)))))))

(defun %binary-= (info)
  (let ((accessors (accessors info)))
    `((defmethod equalp ((x ,(name info)) (y ,(name info)))
        (and ,@(iter (for a in accessors)
                     (collecting `(= (,a x) (,a y))))))
      (defmethod equalp ((x ,(name info)) (y ,(scalar-type info)))
        (and (= (,(first accessors) x) y)
             ,@(iter (for a in (rest accessors))
                     (collecting `(= (,a x) ,(scalar-zero info))))))
      (defmethod equalp ((x ,(scalar-type info)) (y ,(name info)))
        (and (= x (,(first accessors) y))
             ,@(iter (for a in (rest accessors))
                     (collecting `(= ,(scalar-zero info) (,a y)))))))))

(defun create-predicate-functions (info)
  `(,(%zerop info)
    ,@(%binary-= info)))
