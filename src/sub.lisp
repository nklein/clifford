(in-package #:clifford)

(defun %unary-subtraction (info)
  `(defmethod unary-- ((x ,(name info)))
     (,(constructor info)
       ,@(iter (for a in-accessors-of info)
               (collecting `(- (,a x)))))))

(defun %binary-subtraction (info)
  `(defmethod binary-- ((x ,(name info)) (y ,(name info)))
     (,(constructor info)
       ,@(iter (for a in-accessors-of info)
               (collecting `(- (,a x) (,a y)))))))

(defun %scalar-subtraction (info)
  `((defmethod binary-- ((x ,(name info)) (y ,(scalar-type info)))
      (,(constructor info)
        ,(first (keywords info)) (- (,(first (accessors info)) x) y)
        ,@(iter (for a in-non-scalar-accessors-of info)
                (collecting `(,a x)))))
    (defmethod binary-- ((x ,(scalar-type info)) (y ,(name info)))
      (,(constructor info)
        ,(first (keywords info)) (- x (,(first (accessors info)) y))
        ,@(iter (for a in-non-scalar-accessors-of info)
                (collecting `(- (,a y))))))))

(defun %1--subtraction (info)
  `(defmethod 1- ((x ,(name info)))
     (,(constructor info)
       ,(first (keywords info)) (1- (,(first (accessors info)) x))
       ,@(iter (for a in-non-scalar-accessors-of info)
               (collecting `(,a x))))))

(defun create-subtraction-functions (info)
  `(,(%unary-subtraction info)
    ,(%binary-subtraction info)
    ,@(%scalar-subtraction info)
    ,(%1--subtraction info)))
